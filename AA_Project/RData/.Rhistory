dat[dat$cTrial > 1] -1
dat[dat$cTrial > 1,] -1
mutate(dat, cTrial = ifelse(cTrial == 1, cTrial, cTrial -1))
tempdat <- mutate(dat, cTrial = ifelse(cTrial == 1, cTrial, cTrial -1))
tempdat$cTrial
dat$cTrial - 1
dat$cTrial
dat$Trial
sort(dat$Trial)
sort(dat$Trial - )
sort(dat$Trial - 1)
sort(dat$Trial[dat$cTrial > 1][dat$cTrial -1])
sort(mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))$cTrial
)
sort(mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))$cTrial)
mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))$cTrial
tdat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))$cTrial
sort(tdat)
mutate(tdat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))$cTrial
tdat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
mutate(tdat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))$cTrial
sort(mutate(tdat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))$cTrial)
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
sort(dat$cTrial)
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
sort(dat$cTrial)
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
sort(dat$cTrial)
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
sort(unique(dat$cTrial)
)
dat <- mutate(dat, cTrial = ifelse(cTrial > 5, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 11, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 31, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 36, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 43, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 44, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 48, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 54, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 68, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 71, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 90, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 99, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 106, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 116, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 118, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 87, cTrial -1, cTrial))
sort(unique(dat$cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 127, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 139, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 141, cTrial -4, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 143, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 158, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 5, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 11, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 31, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 44, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 54, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 68, cTrial -2, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 71, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 74, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 11, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 31, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 5, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 11, cTrial -2, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 31, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- subdat
dat$cTrial <- dat$Trial
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 5, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 11, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 30, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 35, cTrial -1, cTrial))
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 5, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- subdat
dat$cTrial <- dat$Trial
dat <- mutate(dat, cTrial = ifelse(cTrial > 1, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 2, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 3, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 5, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 11, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 31, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 36, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 43, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 44, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 48, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 54, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 68, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 72, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 87, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 89, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 99, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 105, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 115, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 117, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 127, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 139, cTrial -2, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 141, cTrial -4, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 143, cTrial -1, cTrial))
sort(unique(dat$cTrial))
dat <- mutate(dat, cTrial = ifelse(cTrial > 158, cTrial -1, cTrial))
sort(unique(dat$cTrial))
diff(unique(subdat$Trial))
diff(sort(unique(subdat$Trial))
)
sort(unique(subdat$Trial))
ddply(datafile, c('Subject', 'TrialExp'), summarise)
rm(list = ls()) #Clear that workspace
install.packages("lme4", repos = 'http://cran.us.r-project.org')
library(plyr) #ddply and stuff
library(lme4) #Linear mixed effect models
library(itsadug) #GAMMs
setwd("/Users/Flowhill.LAPTOP-BM58MNNH/Documents/AdvStatMod/") #Set yo wd
datafile <- read.table("behavioral-data.txt", header=TRUE, sep="\ ", stringsAsFactors=FALSE) #We're using the same data as in the last few lectures
# always immediately check whether the data looks as expected:
head(datafile)
rm(list = ls()) #Clear that workspace
install.packages("lme4", repos = 'http://cran.us.r-project.org')
library(plyr) #ddply and stuff
library(dplyr)
library(lme4) #Linear mixed effect models
library(itsadug) #GAMMs
setwd("/Users/Flowhill.LAPTOP-BM58MNNH/Documents/AdvStatMod/") #Set yo wd
datafile <- read.table("behavioral-data.txt", header=TRUE, sep="\ ", stringsAsFactors=FALSE) #We're using the same data as in the last few lectures
# always immediately check whether the data looks as expected:
head(datafile)
install.packages("lme4", repos = "http://cran.us.r-project.org")
rm(list = ls()) #Clear that workspace
install.packages("lme4", repos = 'http://cran.us.r-project.org')
library(plyr) #ddply and stuff
library(dplyr)
library(lme4) #Linear mixed effect models
library(itsadug) #GAMMs
setwd("/Users/Flowhill.LAPTOP-BM58MNNH/Documents/AdvStatMod/") #Set yo wd
datafile <- read.table("behavioral-data.txt", header=TRUE, sep="\ ", stringsAsFactors=FALSE) #We're using the same data as in the last few lectures
# always immediately check whether the data looks as expected:
head(datafile)
rm(list = ls()) #Clear that workspace
#install.packages("lme4", repos = 'http://cran.us.r-project.org')
library(plyr) #ddply and stuff
library(dplyr)
library(lme4) #Linear mixed effect models
library(itsadug) #GAMMs
setwd("/Users/Flowhill.LAPTOP-BM58MNNH/Documents/AdvStatMod/") #Set yo wd
datafile <- read.table("behavioral-data.txt", header=TRUE, sep="\ ", stringsAsFactors=FALSE) #We're using the same data as in the last few lectures
# always immediately check whether the data looks as expected:
head(datafile)
ddply(datafile, c('Subject', 'TrialExp'), summarise)
#Sum acc over subjects.
tapply(datafile$acc, datafile$Subject, sum)
# We see that not everyone has done 80 trials, we'd like to make it more continuous.
datafile$TrialExp <- (datafile$Block-1)*80 + datafile$Trial
ddply(datafile, c('Subject', 'TrialExp'), summarise)
ddply(datafile, c('Subject', 'Block'), summarise)
ddply(datafile, c('Subject', 'Block'), summarise, avg = mean('acc'))
ddply(datafile, c('Subject', 'Block'), summarise, avg = mean('acc' == 1))
ddply(datafile, c('Subject', 'Block'), summarise, avg = sum('acc' == 1))
datafile$acc = as.double(datafile$acc)
ddply(datafile, c('Subject', 'Block'), summarise, avg = sum('acc' == 1))
ddply(datafile, c('Subject', 'Block'), summarise, avg = mean('acc'))
ddply(datafile, c('Subject', 'Block'), summarise, avg = mean('acc' == 1))
length(datafile$acc == 1)
length(datafile$acc == 0)
datafile[datafile$acc == 1]
datafile[datafile$acc == 1,]
length(datafile[datafile$acc == 1,])
length(datafile[datafile$acc == 0,])
length(datafile[datafile$acc == 0])
length(datafile)
View(datafile)
nrows(datafile)
nrow(datafile)
nrow(datafile[datafile$acc == 1])
nrow(datafile[datafile$acc == 1,])
ddply(datafile, c('Subject', 'Block'), summarise, avg = nrow(datafile[datafile$$acc == 1]) / nrow(datafile))
ddply(datafile, c('Subject', 'Block'), summarise, avg = nrow(datafile[datafile$acc == 1]) / nrow(datafile))
ddply(datafile, c('Subject', 'Block'), summarise, avg = nrow(datafile[datafile$acc == 1,]) / nrow(datafile))
ddply(datafile, c('Subject', 'Block'), summarise, avg = mean(acc == 1))
ddply(datafile, c('Subject', 'Block'), summarise, avgAcc = mean(acc == 1))
ddply(datafile, c(colnames(datafile)), summarise, avgAcc = mean(acc == 1))
datafile$acc = as.double(datafile$acc)
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per TrialExp, per Fan, etc.)
ddply(datafile, c('Subject', 'TrialExp', 'Fan', 'PairTYpe', 'Probe.RT', 'Word1_Freq', 'Word1_Imag', 'Word2_Freq', 'Word2_Imag', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per TrialExp, per Fan, etc.)
ddply(datafile, c('Subject', 'TrialExp', 'Fan', 'PairType', 'Probe.RT', 'Word1_Freq', 'Word1_Imag', 'Word2_Freq', 'Word2_Imag', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
sortDat <- sort(datafile$avgAcc)
qqnorm(sortDat)
sort(datafile$avgAcc)
datafile$avgAcc
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per TrialExp, per Fan, etc.)
ddply(datafile, c('Subject', 'Trial', 'Block', 'Fan', 'PairType', 'Probe.RT', 'Word1_Freq', 'Word1_Imag', 'Word2_Freq', 'Word2_Imag', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per TrialExp, per Fan, etc.)
ddply(datafile, c('Subject', 'Trial', 'Block', 'Fan', 'PairType', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per TrialExp, per Fan, etc.)
ddply(datafile, c('Subject', 'Trial', 'Block', 'Fan', 'PairType', 'cooc'), summarise, avgAcc = mean(acc == 1))
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per Trial, per Fan, etc.)
ddply(datafile, c('Subject', 'Trial', 'Block', 'Fan'), summarise, avgAcc = mean(acc == 1))
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per Fan, etc.)
ddply(datafile, c('Subject', 'Fan', 'PairType', 'Word1_Freq', 'Word1_Imag', 'Word2_Freq', 'Word2_Imag', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per Fan, etc.)
ddply(datafile, c('Subject', 'Fan', 'PairType', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
sortDat <- sort(datafile$avgAcc)
qqnorm(sortDat)
sort(datafile$avgAcc)
datafile$avgAcc
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per Fan, etc.)
newdat <- ddply(datafile, c('Subject', 'Fan', 'PairType', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
checkdat <- sort(newdat$avgAcc)
qqnorm(sortDat)
qqnorm(checkdat)
m1 < lm( X ~ Y1 + Y2 , data = dat)
m1 <- lm( X ~ Y1 + Y2 , data = dat)
m1 <- lm( X ~ Y1 + Y2 , data = dat)
m1 <- lm(avgAcc ~ Fan + PairType, data = newdat)
summary(m1)
plot(resid(m1))
m1 <- lm(avgAcc ~ Fan + PairType + cooc, data = newdat)
summary(m1)
plot(resid(m1))
m1 <- lm(avgAcc ~ Fan + PairType + lenPair, data = newdat)
summary(m1)
plot(resid(m1))
m1 <- lm(avgAcc ~ Fan * PairType * lenPair, data = newdat)
summary(m1)
plot(resid(m1))
dat$rt2log <- log(dat$rt2)
load("DykesRivers.rda")
head(dat)
dat$rt2log <- log(dat$rt2)
dat <- droplevels(dat, exclude = rt2 < 1000 ~ rt2 > 4700)
dat <- droplevels(dat, exclude = rt2 < 1000 | rt2 > 4700)
dat <- droplevels(dat, exclude = dat$rt2 < 1000 | dat$rt2 > 4700)
head(dat)
head(sort(dat$rt2))
tail(sort(dat$rt2))
dat <- droplevels(dat, exclude = dat$rt2 < 1000)
head(sort(dat$rt2))
dat <- droplevels(dat, exclude = if(dat$rt2 < 1000 | dat$rt2 > 4700))
dat <- droplevels(dat, exclude = if{dat$rt2 < 1000 | dat$rt2 > 4700})
dat <- droplevels(dat, exclude = if(dat$rt2 < 1000 | dat$rt2 > 4700)
dat <- droplevels(dat, exclude = if(dat$rt2 < 1000 | dat$rt2 > 4700))
dat <- dat[dat$rt2 < 1000,]
dat <- dat[dat$rt2 > 4700,]
head(sort(dat$rt2))
head(sort(dat$rt2))
head(dat)
load("DykesRivers.rda")
head(dat)
dat <- dat[dat$rt2 < 1000,]
dat <- dat[dat$rt2 > 4700,]
head(sort(dat$rt2))
load("DykesRivers.rda")
head(dat)
dat <- dat[dat$rt2 > 1000,]
dat <- dat[dat$rt2 < 4700,]
head(sort(dat$rt2))
tail(sort(dat$rt2))
dat$rt2log <- log(dat$rt2)
head(dat)
summary(m1)
m1 <- bam( rt2log ~ cond + s(seq2, by = cond) + s(subj, bs = 're') , data = dat)
library(itsadug)
m1 <- bam( rt2log ~ cond + s(seq2, by = cond) + s(subj, bs = 're') , data = dat)
summary(m1)
nrow(dat[dat$cond == DR])
nrow(dat[dat$cond == 'DR'])
nrow(dat[dat$cond == 'DR',])
head(dat)
nrow(dat[dat$cond != 'DR',])
nrow(dat[dat$cond == 'DR',])
nrow(dat[dat$cond != 'DR',])
m2 <- bam( rt2.log ~ cond + s(seq2, by = cond) + s(subj, bs = 'fs'), data = dat)
m2 <- bam( rt2log ~ cond + s(seq2, by = cond) + s(subj, bs = 'fs'), data = dat)
summary(m2)
summary(m1)
summary(m1)
summary(m2)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
plot_smooth(m2, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
plot_diff(m1, view= 'seq2' , comp=list(cond = c('FF', 'RD')), rm.ranef=TRUE)
plot_diff(m1, view= 'seq2' , comp=list(cond = c('FF', 'DR')), rm.ranef=TRUE)
plot_diff(m2, view= 'seq2' , comp=list(cond = c('FF', 'RD')), rm.ranef=TRUE)
plot_diff(m2, view= 'seq2' , comp=list(cond = c('FF', 'DR')), rm.ranef=TRUE)
plot_diff(m1, view= 'seq2' , comp=list(cond = c('FF', 'RD')), rm.ranef=FALSE)
plot_diff(m1, view= 'seq2' , comp=list(cond = c('FF', 'DR')), rm.ranef=FALSE)
plot_diff(m2, view= 'seq2' , comp=list(cond = c('FF', 'RD')), rm.ranef=FALSE)
plot_diff(m2, view= 'seq2' , comp=list(cond = c('FF', 'DR')), rm.ranef=FALSE)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=FALSE)
lot_diff(m1, view= 'seq2' , comp=list(cond = c('FF', 'RD')), rm.ranef=TRUE)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
plot_smooth(m1, view = 'rt2log' , plot_all= 'cond', rm.ranef=TRUE)
plot_smooth(m1, view = 'subj' , plot_all= 'cond', rm.ranef=TRUE)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
m1 <- bam( rt2log ~ cond + s(subj, by = cond) + s(subj, bs = 're') , data = dat)
m1 <- bam( rt2log ~ cond + s(seq2, by = subj) + s(subj, bs = 're') , data = dat)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
plot_smooth(m1, view = 'seq2' , plot_all= 'subj', rm.ranef=TRUE)
m1 <- bam( rt2log ~ cond + s(seq2, by = cond) + s(subj, bs = 're') , data = dat)
summary(m1)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=FALSE)
plot_smooth(m1, view = 'seq2' , plot_all= 'cond', rm.ranef=TRUE)
rm(list = ls()) #Clear that workspace
#install.packages("lme4", repos = 'http://cran.us.r-project.org')
library(plyr) #ddply and stuff
library(dplyr)
library(lme4) #Linear mixed effect models
library(itsadug) #GAMMs
setwd("/Users/Flowhill.LAPTOP-BM58MNNH/Documents/AdvStatMod/") #Set yo wd
datafile <- read.table("behavioral-data.txt", header=TRUE, sep="\ ", stringsAsFactors=FALSE) #We're using the same data as in the last few lectures
# always immediately check whether the data looks as expected:
head(datafile)
#Sum acc over subjects.
tapply(datafile$acc, datafile$Subject, sum)
# We see that not everyone has done 80 trials, we'd like to make it more continuous.
datafile$TrialExp <- (datafile$Block-1)*80 + datafile$Trial
datafile$acc = as.double(datafile$acc)
datafile$Subject = as.factor(datafile$Subject)
datafile$Fan = as.factor(datafile$Fan)
#Now lets summarise the file datafile over the variables between c() and take the average accuracy.
#Because Subject is in the listed variables we get the averages for everything per subject (although we also get it per Fan, etc.)
newdat <- ddply(datafile, c('Subject', 'Fan', 'PairType', 'cooc', 'lenPair'), summarise, avgAcc = mean(acc == 1))
m1 <- lm( X ~ Y1 + Y2 , data = dat)
checkdat <- sort(newdat$avgAcc)
qqnorm(checkdat)
checkdat <- sort(newdat$avgAcc)
qqnorm(checkdat)
qqline(checkdat)
rm(list = ls())
install.packages("lme4", repos = 'http://cran.us.r-project.org')
library(plyr)
library(lme4)
setwd("C:/Users/Flowhill.LAPTOP-BM58MNNH/Documents/AdvStatMod/")
datafile <- read.table("behavioral-data.txt", header=TRUE, sep="\ ", stringsAsFactors=FALSE)
# always immediately check whether the data looks as expected:
head(datafile)
summary(datafile)
which(is.na(datafile$Probe.RT))
# Check the size of the data
dim(datafile)
nrow(datafile)
ncol(datafile)
# List the column names:
names(datafile)
# which is for data.frames (but not for vectors) the same as:
colnames(datafile)
# .. and not very informative here:
# rownames(datafile)
# List the structure of the data
str(datafile)
summary(datafile)
# Print the first and the last 3 rows in the data
head(datafile, 3)
tail(datafile, 3)
range(datafile$Probe.RT)
datafile <- droplevels(datafile[datafile$Probe.RT > 50,])
range(datafile$Probe.RT)
qqnorm(datafile$Probe.RT)
qqline(datafile$Probe.RT)
datafile <- droplevels(datafile[datafile$acc == 1,])
qqnorm(datafile$Probe.RT)
qqline(datafile$Probe.RT)
datafile$logRT <- log(datafile$Probe.RT)
datafile$inverseRT <- -1000/datafile$Probe.RT
par(mfrow=c(1,2)) # it will allow you to combine two graphs in one
qqnorm(datafile$logRT, main = "Q-Q Plot of Log RT", ylim=c(5,10))
qqline(datafile$logRT)
qqnorm(datafile$inverseRT, main = "Q-Q Plot of Inverse RT", ylim=c(-3,3))
qqline(datafile$inverseRT)
qqnorm(resid(m1))
# order data:
datafile2 <- datafile2[order(datafile2$Subject, datafile2$Trial),]
datafile2 <- droplevels(datafile[datafile$PairType != "Target", ])
# order data:
datafile2 <- datafile2[order(datafile2$Subject, datafile2$Trial),]
# create factors:
datafile2$PairType <- as.factor(datafile2$PairType)
# setup model:
m1 <- lm(inverseRT ~ cooc + PairType , data = datafile2)
qqnorm(resid(m1))
qqline(resid(m1))
install.packages("lme4")
rm(list = ls()) #Clear that workspace
library(plyr) #ddply and stuff
library(dplyr)
library(lme4) #Linear mixed effect models
library(itsadug) #GAMMs
setwd("/Users/Flowhill.LAPTOP-BM58MNNH/Documents/AdvStatMod/") #Set yo wd
datafile <- read.table("behavioral-data.txt", header=TRUE, sep="\ ", stringsAsFactors=FALSE) #We're using the same data as in the last few lectures
# always immediately check whether the data looks as expected:
head(datafile)
install.packages("lme4")
library(lme4)
load(lme4)
install.packages("lme4")
dat <- 1
hist(AgentDat)
setwd("D:/HMC/Arguing Agents/RData")
AgentDat <- read.csv("Data.csv", header = TRUE)
install.packages("rbin")
library(rbin)
hist(AgentDat)
hist(AgentDat.verdict)
hist(AgentDat$verdict)
breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90)
hist(AgentDat$verdict, breaks = breaks)
xlim=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90)
hist(AgentDat$verdict,xlim = xlim, breaks = breaks)
xlim=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90)
hist(AgentDat$verdict,xlim = xlim, breaks = breaks)
xlim=c(0, 100)
breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90)
hist(AgentDat$verdict,xlim = xlim, breaks = breaks)
